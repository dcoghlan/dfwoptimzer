import re
import json
from pprint import pprint
import math
import sys
import os
import collections
import argparse
import csv
from common import utils
import time
from parsers.addrset import AddrsetParser
from parsers.ruleset import RulesParser, AnalyzeServices, AnalyzeAppliedTo

# TODO - Show the list of optimized rule IDs somewhere

"""
python3 dfwoptimizer/dfwoptimizer.py -d dfw_appliedto --rules ../gitlab.eng_misc/dfw-optimization/sample_data/OC3-Max-Rules --prefix L3ONLY --addrsets ../gitlab.eng_misc/dfw-optimization/sample_data/OC3-Max-Addrsets --ipaddress 10.38.181.157
python3 dfwoptimizer/dfwoptimizer.py -d dfw_services --rules ../gitlab.eng_misc/dfw-optimization/sample_data/OC3-Max-Rules --prefix services
"""


def process_applied_to(rulesObject, args):
    # rulesObject.dump_genericParsedRuleset_file(args.outputdir, args.prefix)
    parsedRuleset = rulesObject.get_genericParsedRuleset()

    addrsets = AddrsetParser(args.addrsets)
    parsedAddrsets = addrsets.get_addrsets()

    appliedto = AnalyzeAppliedTo(
        args.ipaddress, args.outputdir, args.prefix, parsedRuleset, parsedAddrsets)
    appliedto.process_appliedTo()
    appliedto.dump_l3OptimizedRules_file(args.outputdir, args.prefix)


def process_services(rulesObject, args):
    rulesObject.dump_serviceParsedRuleset_file(args.outputdir, args.prefix)
    services = AnalyzeServices(
        args.outputdir, args.prefix, rulesObject.get_serviceParsedRuleset(), args.debug)
    services.generate_csv()
    services.generate_summary()
    services.display_summary()


def main(args):

    utils.create_dir(args.outputdir)

    if args.parser_mode == 'dfw_services' or args.parser_mode == 'dfw_appliedto':
        utils.validate_file(args.rules, args.debug)
    if args.parser_mode == 'dfw_appliedto':
        utils.validate_file(args.addrsets, args.debug)

    args.prefix = '%s-' % (args.prefix)
    parsedRules = RulesParser(args.rules, args.debug)

    if args.parser_mode == 'dfw_services':
        process_services(parsedRules, args)

    if args.parser_mode == 'dfw_appliedto':
        process_applied_to(parsedRules, args)

    # Display any parsing errors at the end
    parsedRules.parse_errors(args.outputdir, args.prefix)


if __name__ == "__main__":
    utils.print_blank_line()
    utils.validate_python()

    parser = argparse.ArgumentParser(
        description='A script to perform some basic DFW Data Plane Layer3 Rule Optimization analysis.')
    parser.add_argument('-d', '--debug', dest='debug', action='store_true')

    subparsers = parser.add_subparsers(dest='parser_mode')
    parser_services = subparsers.add_parser(
        'dfw_services', help='Process DFW Optmization for rule explosion by services only.')
    parser_services.add_argument(
        '-r', '--rules', help='File containing output of vsipioctl getrules -f <filtername>', metavar='<path>', required=True)
    parser_services.add_argument(
        '-p', '--prefix', help='Name to use for prefix of files generated by the program.', dest='prefix', required=True)
    parser_services.add_argument(
        '-o', '--outputdir', help='Path for all output files/logs', nargs='?', default='./logs', dest='outputdir')

    parser_dfw_appliedto = subparsers.add_parser(
        'dfw_appliedto', help='Process DFW Optmization L3 Applied To only.')
    parser_dfw_appliedto.add_argument(
        '-r', '--rules', help='File containing output of vsipioctl getrules -f <filtername>', metavar='<path>', required=True)
    parser_dfw_appliedto.add_argument(
        '-a', '--addrsets', help='File containing output of vsipioctl getaddrsets -f <filtername>', metavar='<path>', required=True)
    parser_dfw_appliedto.add_argument(
        '-p', '--prefix', help='Name to use for prefix of files generated by the program.', dest='prefix', required=True)
    parser_dfw_appliedto.add_argument(
        '-i', '--ipaddress', help='IP Address to be used to determine Applied To status', metavar='<ip address>', required=True)
    parser_dfw_appliedto.add_argument(
        '-o', '--outputdir', help='Path for all output files/logs', nargs='?', default='./logs', dest='outputdir')

    args = parser.parse_args()
    # args_dict = vars(args)

    if args.debug is True:
        print('\n\n Debug Mode Enabled (Sleeping for 3 seconds so you can make sure you have a large scollback buffer lol) \n\n')
        time.sleep(3)

    main(args)
